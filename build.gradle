plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco' // 자코코 추가
}

group = 'gentledog'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springModulithVersion', "1.1.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // spring-data-jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // spring-modulith
    implementation 'org.springframework.modulith:spring-modulith-starter-core'
    implementation 'org.springframework.modulith:spring-modulith-starter-jpa'
    testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // maria-db
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    // assertJ
    implementation 'org.assertj:assertj-core:3.24.2'
    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    // modelmapper
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.0.0'
    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta" // 버전 변경
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5',
            'io.jsonwebtoken:jjwt-jackson:0.11.5'
    // Email
    implementation 'org.springframework.boot:spring-boot-starter-mail'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport' // test가 끝나면 jacocoTestReport 동작
}

jacocoTestReport {
    dependsOn test // 항상 test가 끝나면 jacocoTestReport 동작
    reports {
        // 원하는 리포트를 켜고 끌 수 있습니다.
        xml.required = true
        csv.required = true
        // 파일 경로 설정
        html.destination file("build/jacoco/index.html")
        csv.destination file("build/jacoco/index.csv")
        xml.destination file("build/jacoco/index.xml")
    }

    // QueryDSL QDomain 제외시키기
    def QDomains = []

    for (qPattern in '**/QA'..'**/QZ') {
        QDomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                // 그 외의 매칭되는 클래스도 제외 대상
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/*Application*",
                            "**/*Config*",
                            "**/*Dto*",
                            "**/*Response*",
                            "**/*Exception*"
                    ] + QDomains)
                })
        )
    }

    // jacocoTestReport가 끝나면 jacocoTestCoverageVerification 동작
    finalizedBy 'jacocoTestCoverageVerification'
}

// jacoco 커버리지 검증 설정
jacocoTestCoverageVerification {

    def Qdomains = []
    // 패키지 + 클래스명
    for (qPattern in "**/QA" .. "**/QZ") { // QA ~ QZ까지의 패키지를 커버리지 검증 대상에서 제외
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true // 커버리지 적용 여부
            element = 'CLASS' // 커버리지 적용 단위

//            // 라인(구문) 커버리지 설정
//            // 적용 대상 전체 소스 코드들을 한줄 한줄 따졌을 때 테스트 코드가 작성되어 있는 줄의 빈도
//            // 테스트 코드가 작성되어 있는 비율이 90% 이상이어야 함
//            limit {
//                counter = 'LINE'
//                value = 'COVEREDRATIO'
//                minimum = 0.90
//            }
//
//            // 브랜치(결정) 커버리지 설정
//            // if-else 등을 활용하여 발생되는 분기들 중 테스트 코드가 작성되어 있는 빈도
//            // 테스트 코드가 작성되어 있는 비율이 90% 이상이어야 함
//            limit {
//                counter = 'BRANCH'
//                value = 'COVEREDRATIO'
//                minimum = 0.90
//            }
//
//            // 라인 최대 갯수 설정
//            // 빈 줄을 제외하고 하나의 자바 파일에서 작성될 수 있는 최대 라인 갯수
//            // 한 파일에 최대 500줄까지 작성되어야 함
//            limit {
//                counter = 'LINE'
//                value = 'TOTALCOUNT'
//                maximum = 500
//            }

            // 마찬가지로 제거 대상 지정
            excludes = [
                    "**.*Application*",
                    "**.*Config*",
                    "**.*Dto*",
                    "**.*Response*",
                    "**.*Exception*"
            ] + Qdomains
        }
    }
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
    }
}
